{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/desafio-front-end/projeto/src/pages/StoreDB/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ContainerBD, CardProducts } from \"./styles\";\nimport { Header } from \"../../components/Header\";\nimport { useProducts } from \"../../providers/Products\";\nimport { ModalUpdate } from \"../../components/ModalUpdate\";\nimport { useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n/*\nFunção que retorna os cards dos produtos cadastrados na base de dados. \n\nComo já informado, tive complicações com o update dos produtos, de qualquer forma, \ndeixei o useEffect que aciona a função loadStore para atualizar o state que contém os produtos, \nmas não funciona como esperado...\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StoreBD = () => {\n  _s();\n\n  const {\n    store,\n    setOpenModal,\n    openModal,\n    setCodeProduct,\n    loadStore\n  } = useProducts();\n  /*\n    openModalUpdate - enviar os dados de udate de produtos para o privider Products\n    */\n\n  const openModalUpdate = productId => {\n    setCodeProduct(productId);\n    setOpenModal(true);\n  };\n  /*\n  loadStore - tenta atualizar os produtos que sofrem atualizações\n  */\n\n\n  useEffect(() => {\n    loadStore();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      exit: {\n        opacity: 0\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), openModal ? /*#__PURE__*/_jsxDEV(ModalUpdate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(ContainerBD, {\n        children: store && store.map((item, index) => /*#__PURE__*/_jsxDEV(CardProducts, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"description\",\n            children: \"Produto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"description\",\n            children: \"Categoria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"description\",\n            children: \"Valor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [item.price, \" R$\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"description\",\n            children: \"Fornecedor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.provider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => openModalUpdate(item.id),\n            children: \"Atualizar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(StoreBD, \"30C7O9qSALcnhDcSasCOWg4J13E=\", false, function () {\n  return [useProducts];\n});\n\n_c = StoreBD;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreBD\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/desafio-front-end/projeto/src/pages/StoreDB/index.tsx"],"names":["ContainerBD","CardProducts","Header","useProducts","ModalUpdate","useEffect","motion","StoreBD","store","setOpenModal","openModal","setCodeProduct","loadStore","openModalUpdate","productId","opacity","duration","map","item","index","name","category","price","provider","id"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,UAA1C;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,YAAT;AAAuBC,IAAAA,SAAvB;AAAkCC,IAAAA,cAAlC;AAAkDC,IAAAA;AAAlD,MACJT,WAAW,EADb;AAGA;AACF;AACA;;AACE,QAAMU,eAAe,GAAIC,SAAD,IAAuB;AAC7CH,IAAAA,cAAc,CAACG,SAAD,CAAd;AACAL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;AAKA;AACF;AACA;;;AACEJ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,MAAD,CAAQ,GAAR;AACE,MAAA,OAAO,EAAE;AAAEG,QAAAA,OAAO,EAAE;AAAX,OADX;AAEE,MAAA,OAAO,EAAE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAFX;AAGE,MAAA,IAAI,EAAE;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAHR;AAIE,MAAA,UAAU,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAJd;AAAA,8BAME,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cANF,EAOGN,SAAS,gBAAG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAqB,qCAPjC,eAQE,QAAC,WAAD;AAAA,kBACGF,KAAK,IACJA,KAAK,CAACS,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACR,QAAC,YAAD;AAAA,kCACE;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAOD,IAAI,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA,sBAAOF,IAAI,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAA,uBAAOH,IAAI,CAACI,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAI,YAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,eAQE;AAAA,sBAAOJ,IAAI,CAACK;AAAZ;AAAA;AAAA;AAAA;AAAA,kBARF,eASE;AAAQ,YAAA,OAAO,EAAE,MAAMV,eAAe,CAACK,IAAI,CAACM,EAAN,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA,WAAmBL,KAAnB;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA+BD,CAlDM;;GAAMZ,O;UAETJ,W;;;KAFSI,O","sourcesContent":["import { ContainerBD, CardProducts } from \"./styles\";\nimport { Header } from \"../../components/Header\";\nimport { useProducts } from \"../../providers/Products\";\nimport { ModalUpdate } from \"../../components/ModalUpdate\";\nimport { useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\n/*\nFunção que retorna os cards dos produtos cadastrados na base de dados. \n\nComo já informado, tive complicações com o update dos produtos, de qualquer forma, \ndeixei o useEffect que aciona a função loadStore para atualizar o state que contém os produtos, \nmas não funciona como esperado...\n*/\n\nexport const StoreBD = () => {\n  const { store, setOpenModal, openModal, setCodeProduct, loadStore } =\n    useProducts();\n\n  /*\n    openModalUpdate - enviar os dados de udate de produtos para o privider Products\n    */\n  const openModalUpdate = (productId: number) => {\n    setCodeProduct(productId);\n    setOpenModal(true);\n  };\n\n  /*\n  loadStore - tenta atualizar os produtos que sofrem atualizações\n  */\n  useEffect(() => {\n    loadStore();\n  }, []);\n\n  return (\n    <>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Header />\n        {openModal ? <ModalUpdate /> : <></>}\n        <ContainerBD>\n          {store &&\n            store.map((item, index) => (\n              <CardProducts key={index}>\n                <h4 className=\"description\">Produto</h4>\n                <span>{item.name}</span>\n                <h4 className=\"description\">Categoria</h4>\n                <span>{item.category}</span>\n                <h4 className=\"description\">Valor</h4>\n                <span>{item.price} R$</span>\n                <h4 className=\"description\">Fornecedor</h4>\n                <span>{item.provider}</span>\n                <button onClick={() => openModalUpdate(item.id)}>\n                  Atualizar\n                </button>\n              </CardProducts>\n            ))}\n        </ContainerBD>\n      </motion.div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}