{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/novo/desafio-frontend/src/components/FormUserLogin/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport { Input } from \"../Input\";\nimport { useAuthLogin } from \"../../providers/Auth\";\nimport { FormContainer } from \"./styles\";\n/*\nFunção que retora o formulário que aparece na page de logim\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormUserLogin = () => {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  const {\n    userLogin\n  } = useAuthLogin();\n  const history = useHistory();\n  const regex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-])/;\n  const validator = new RegExp(regex);\n  const schema = yup.object().shape({\n    email: yup.string().email(\"Email inválido\").required(\"Campo obrigatório\"),\n    password: yup.string().min(6, \"Senha deve ter no mínimo 6 digitos\").required(\"Campo obrigatório\").matches(validator, \"Senha deve ter pelo menos um caracter minúsculo, um maiúsculo, um número e um caracter especial\")\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmitFunction = data => {\n    userLogin(data, history);\n    reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmitFunction),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Fa\\xE7a seu \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"login\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"email\",\n        placeholder: \"Email\",\n        register: register,\n        name: \"email\",\n        error: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"password\",\n        placeholder: \"Senha\",\n        register: register,\n        name: \"password\",\n        error: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        type: \"submit\",\n        children: \"Entrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/register\",\n        className: \"account\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"N\\xE3o possui conta?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormUserLogin, \"rIwKt5ESqesbNL+gVLnJFBc99L8=\", false, function () {\n  return [useAuthLogin, useHistory, useForm];\n});\n\n_c = FormUserLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormUserLogin\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/novo/desafio-frontend/src/components/FormUserLogin/index.tsx"],"names":["yupResolver","useForm","yup","Link","useHistory","Input","useAuthLogin","FormContainer","FormUserLogin","userLogin","history","regex","validator","RegExp","schema","object","shape","email","string","required","password","min","matches","register","handleSubmit","reset","formState","errors","resolver","onSubmitFunction","data","message"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,yBAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA;AACA;AACA;;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,YAAY,EAAlC;AACA,QAAMI,OAAO,GAAGN,UAAU,EAA1B;AAEA,QAAMO,KAAK,GAAG,0DAAd;AACA,QAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAWF,KAAX,CAAlB;AAEA,QAAMG,MAAM,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,IAAAA,KAAK,EAAEf,GAAG,CAACgB,MAAJ,GAAaD,KAAb,CAAmB,gBAAnB,EAAqCE,QAArC,CAA8C,mBAA9C,CADyB;AAEhCC,IAAAA,QAAQ,EAAElB,GAAG,CACVgB,MADO,GAEPG,GAFO,CAEH,CAFG,EAEA,oCAFA,EAGPF,QAHO,CAGE,mBAHF,EAIPG,OAJO,CAKNV,SALM,EAMN,iGANM;AAFsB,GAAnB,CAAf;AAYA,QAAM;AACJW,IAAAA,QADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAJP,MAKF1B,OAAO,CAAC;AACV2B,IAAAA,QAAQ,EAAE5B,WAAW,CAACc,MAAD;AADX,GAAD,CALX;;AASA,QAAMe,gBAAgB,GAAIC,IAAD,IAAwB;AAC/CrB,IAAAA,SAAS,CAACqB,IAAD,EAAOpB,OAAP,CAAT;AACAe,IAAAA,KAAK;AACN,GAHD;;AAKA,sBACE,QAAC,aAAD;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAED,YAAY,CAACK,gBAAD,CAA5B;AAAA,8BACE;AAAA,gDACW;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADX;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,WAAW,EAAC,OAFd;AAGE,QAAA,QAAQ,EAAEN,QAHZ;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,KAAK,mBAAEI,MAAM,CAACV,KAAT,kDAAE,cAAcc;AALvB;AAAA;AAAA;AAAA;AAAA,cAJF,eAWE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,WAAW,EAAC,OAFd;AAGE,QAAA,QAAQ,EAAER,QAHZ;AAIE,QAAA,IAAI,EAAC,UAJP;AAKE,QAAA,KAAK,sBAAEI,MAAM,CAACP,QAAT,qDAAE,iBAAiBW;AAL1B;AAAA;AAAA;AAAA;AAAA,cAXF,eAkBE;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAA2B,QAAA,IAAI,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF,eAqBE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,WAAT;AAAqB,QAAA,SAAS,EAAC,SAA/B;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA9DM;;GAAMvB,a;UACWF,Y,EACNF,U,EAsBZH,O;;;KAxBOO,a","sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router\";\nimport { Input } from \"../Input\";\nimport { UserAuthData } from \"../../types/AuthUser\";\nimport { useAuthLogin } from \"../../providers/Auth\";\nimport { FormContainer } from \"./styles\";\n\n/*\nFunção que retora o formulário que aparece na page de logim\n*/\n\nexport const FormUserLogin = () => {\n  const { userLogin } = useAuthLogin();\n  const history = useHistory();\n\n  const regex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-])/;\n  const validator = new RegExp(regex);\n\n  const schema = yup.object().shape({\n    email: yup.string().email(\"Email inválido\").required(\"Campo obrigatório\"),\n    password: yup\n      .string()\n      .min(6, \"Senha deve ter no mínimo 6 digitos\")\n      .required(\"Campo obrigatório\")\n      .matches(\n        validator,\n        \"Senha deve ter pelo menos um caracter minúsculo, um maiúsculo, um número e um caracter especial\"\n      ),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmitFunction = (data: UserAuthData) => {\n    userLogin(data, history);\n    reset();\n  };\n\n  return (\n    <FormContainer>\n      <form onSubmit={handleSubmit(onSubmitFunction)}>\n        <h2>\n          Faça seu <span className=\"login\">Login</span>\n        </h2>\n        <Input\n          type=\"email\"\n          placeholder=\"Email\"\n          register={register}\n          name=\"email\"\n          error={errors.email?.message}\n        />\n        <Input\n          type=\"password\"\n          placeholder=\"Senha\"\n          register={register}\n          name=\"password\"\n          error={errors.password?.message}\n        />\n        <button className=\"button\" type=\"submit\">\n          Entrar\n        </button>\n        <Link to=\"/register\" className=\"account\">\n          <h5>Não possui conta?</h5>\n        </Link>\n      </form>\n    </FormContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}