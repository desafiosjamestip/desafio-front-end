{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/UserProvider/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useAuth } from \"../Auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext({});\nexport const UserDataProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    token\n  } = useAuth();\n  console.log(token); // const userId = localStorage.getItem(\"@iCash: userId\");\n\n  const UpdateUser = (data, userId) => {\n    console.log(userId);\n    console.log(data);\n    const url = `https://api.github.com/users/` + userId;\n    console.log(url);\n    fetch(url, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      mode: \"cors\",\n      cache: \"default\"\n    }).then(response => console.log(response)).catch(_ => toast.error(\"Algo saiu mal. Tente novamente.\")); // .patch(`https://api-icash.herokuapp.com/users/${userId}`, data, {\n    //   headers: {\n    //     Authorization: `Bearer ${token}`,\n    //   },\n    // })\n    // .then((_) => {\n    //   toast.success(\"Dados atualizados com sucesso!\");\n    // })\n    // .catch((err) => {\n    //   toast.error(\"Oops, algo saiu mal. Tente novamente.\");\n    // });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      UpdateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserDataProvider, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});\n\n_c = UserDataProvider;\nexport const useUpdate = () => {\n  _s2();\n\n  return useContext(UserContext);\n};\n\n_s2(useUpdate, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDataProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/UserProvider/index.tsx"],"names":["createContext","useContext","toast","useAuth","UserContext","UserDataProvider","children","token","console","log","UpdateUser","data","userId","url","fetch","method","headers","Authorization","mode","cache","then","response","catch","_","error","useUpdate"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,QAAqD,OAArD;AAGA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,OAAT,QAAwB,SAAxB;;AAWA,MAAMC,WAAW,gBAAGJ,aAAa,CAAmB,EAAnB,CAAjC;AAEA,OAAO,MAAMK,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,OAAO,EAAzB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFmE,CAInE;;AAEA,QAAMG,UAAU,GAAG,CAACC,IAAD,EAAuBC,MAAvB,KAA0C;AAC3DJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AAEA,UAAME,GAAG,GAAI,+BAAD,GAAkCD,MAA9C;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAC,IAAAA,KAAK,CAACD,GAAD,EAAM;AACTE,MAAAA,MAAM,EAAE,OADC;AAETC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASV,KAAM;AAAjC,OAFA;AAGTW,MAAAA,IAAI,EAAE,MAHG;AAITC,MAAAA,KAAK,EAAE;AAJE,KAAN,CAAL,CAMGC,IANH,CAMSC,QAAD,IAAcb,OAAO,CAACC,GAAR,CAAYY,QAAZ,CANtB,EAOGC,KAPH,CAOUC,CAAD,IAAOrB,KAAK,CAACsB,KAAN,CAAY,iCAAZ,CAPhB,EAN2D,CAc3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAzBD;;AA0BA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEd,MAAAA;AAAF,KAA7B;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCM;;GAAMD,gB;UACOF,O;;;KADPE,gB;AAuCb,OAAO,MAAMoB,SAAS,GAAG;AAAA;;AAAA,SAAMxB,UAAU,CAACG,WAAD,CAAhB;AAAA,CAAlB;;IAAMqB,S","sourcesContent":["import { createContext, ReactNode, useContext } from \"react\";\nimport api from \"../../services/api\";\nimport { userUpdateData } from \"../../types/userUpdateData\";\nimport toast from \"react-hot-toast\";\nimport { useAuth } from \"../Auth\";\nimport axios from \"axios\";\n\ninterface UserProviderProps {\n  children: ReactNode;\n}\n\ninterface UserProviderData {\n  UpdateUser: (data: userUpdateData, userId: string) => void;\n}\n\nconst UserContext = createContext<UserProviderData>({} as UserProviderData);\n\nexport const UserDataProvider = ({ children }: UserProviderProps) => {\n  const { token } = useAuth();\n  console.log(token);\n\n  // const userId = localStorage.getItem(\"@iCash: userId\");\n\n  const UpdateUser = (data: userUpdateData, userId: string) => {\n    console.log(userId);\n    console.log(data);\n\n    const url = `https://api.github.com/users/` + userId;\n    console.log(url);\n    fetch(url, {\n      method: \"PATCH\",\n      headers: { Authorization: `Bearer ${token}` },\n      mode: \"cors\",\n      cache: \"default\",\n    })\n      .then((response) => console.log(response))\n      .catch((_) => toast.error(\"Algo saiu mal. Tente novamente.\"));\n    // .patch(`https://api-icash.herokuapp.com/users/${userId}`, data, {\n    //   headers: {\n    //     Authorization: `Bearer ${token}`,\n    //   },\n    // })\n    // .then((_) => {\n    //   toast.success(\"Dados atualizados com sucesso!\");\n    // })\n    // .catch((err) => {\n    //   toast.error(\"Oops, algo saiu mal. Tente novamente.\");\n    // });\n  };\n  return (\n    <UserContext.Provider value={{ UpdateUser } as UserProviderData}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUpdate = () => useContext(UserContext);\n"]},"metadata":{},"sourceType":"module"}