{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport api from \"../../Services\";\nimport { useProducts } from \"../Products\";\n/*\nFunção que faz o registro de usuários na api e contém as interfaces necessárias para as validações do\ntypescript\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserRegisterContext = /*#__PURE__*/createContext({});\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    loadStore\n  } = useProducts();\n  useEffect(() => {\n    loadStore();\n  }, []);\n  /*\n  userRegister - faz a requicição de registro do usuário na api\n   */\n\n  const userRegister = (data, history) => {\n    console.log(data);\n    api.post(\"/register\", data).then(_ => {\n      toast.success(\"Cadastro realizado com sucesso\");\n      return history.push(\"/login\");\n    }).catch(_ => {\n      toast.error(\"Tente novamente\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserRegisterContext.Provider, {\n    value: {\n      userRegister\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserProvider, \"G1k9a3Md/T0coE9kJHWnZcuxk0k=\", false, function () {\n  return [useProducts];\n});\n\n_c = UserProvider;\nexport const useRegisterUser = () => {\n  _s2();\n\n  return useContext(UserRegisterContext);\n};\n\n_s2(useRegisterUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx"],"names":["createContext","useContext","useEffect","toast","api","useProducts","UserRegisterContext","UserProvider","children","loadStore","userRegister","data","history","console","log","post","then","_","success","push","catch","error","useRegisterUser"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,QAAgE,OAAhE;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;AACA;AACA;AACA;;;AAUA,MAAMC,mBAAmB,gBAAGN,aAAa,CAAW,EAAX,CAAzC;AAEA,OAAO,MAAMO,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAAA;;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAgBJ,WAAW,EAAjC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA;AACF;AACA;;AACE,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAyBC,OAAzB,KAA8C;AACjEC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAP,IAAAA,GAAG,CACAW,IADH,CACQ,WADR,EACqBJ,IADrB,EAEGK,IAFH,CAESC,CAAD,IAAO;AACXd,MAAAA,KAAK,CAACe,OAAN,CAAc,gCAAd;AACA,aAAON,OAAO,CAACO,IAAR,CAAa,QAAb,CAAP;AACD,KALH,EAMGC,KANH,CAMUH,CAAD,IAAO;AACZd,MAAAA,KAAK,CAACkB,KAAN,CAAY,iBAAZ;AACD,KARH;AASD,GAXD;;AAaA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEX,MAAAA;AAAF,KAArC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA5BM;;GAAMD,Y;UACWF,W;;;KADXE,Y;AA8Bb,OAAO,MAAMe,eAAe,GAAG;AAAA;;AAAA,SAAMrB,UAAU,CAACK,mBAAD,CAAhB;AAAA,CAAxB;;IAAMgB,e","sourcesContent":["import { createContext, ReactNode, useContext, useEffect } from \"react\";\nimport { History } from \"history\";\nimport toast from \"react-hot-toast\";\nimport { UserRegisterData } from \"../../types/RegisterUser\";\nimport api from \"../../Services\";\nimport { useProducts } from \"../Products\";\n\n/*\nFunção que faz o registro de usuários na api e contém as interfaces necessárias para as validações do\ntypescript\n*/\n\ninterface UserProps {\n  children: ReactNode;\n}\n\ninterface UserData {\n  userRegister: (data: UserRegisterData, history: History) => void;\n}\n\nconst UserRegisterContext = createContext<UserData>({} as UserData);\n\nexport const UserProvider = ({ children }: UserProps) => {\n  const { loadStore } = useProducts();\n\n  useEffect(() => {\n    loadStore();\n  }, []);\n\n  /*\n  userRegister - faz a requicição de registro do usuário na api\n   */\n  const userRegister = (data: UserRegisterData, history: History) => {\n    console.log(data);\n    api\n      .post(\"/register\", data)\n      .then((_) => {\n        toast.success(\"Cadastro realizado com sucesso\");\n        return history.push(\"/login\");\n      })\n      .catch((_) => {\n        toast.error(\"Tente novamente\");\n      });\n  };\n\n  return (\n    <UserRegisterContext.Provider value={{ userRegister }}>\n      {children}\n    </UserRegisterContext.Provider>\n  );\n};\n\nexport const useRegisterUser = () => useContext(UserRegisterContext);\n"]},"metadata":{},"sourceType":"module"}