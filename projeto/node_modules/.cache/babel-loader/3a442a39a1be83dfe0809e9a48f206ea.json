{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/novo/desafio-frontend/src/components/ModalUpdate/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { ModalUp } from \"./styles\";\nimport { Input } from \"../Input\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { useProducts } from \"../../providers/Products\";\nimport { FiX } from \"react-icons/fi\";\n/*\nFunção que retorna um modal com formulário que aparece na page StoreBD para atualizar os dados dos produtos.\n\nOBS: mesmo utilizando o método PACTH na requisição de Update, infelizmente não consegui retornar os dados\natualizados de forma satifatória. Precisei deixar todos os campos como preenchimento obriatório (mesmo sendo \n  PATCH), pois os dados não preenchidos estavam voltando em branco. \nTentei resolver isso com useEffect, mas sem sucesso... \n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ModalUpdate = () => {\n  _s();\n\n  var _errors$name, _errors$category, _errors$price, _errors$provider;\n\n  const {\n    updateProducts,\n    setOpenModal,\n    codeProduct\n  } = useProducts();\n  const schema = yup.object().shape({\n    name: yup.string().required(\"Confirme o nome ou altere\"),\n    provider: yup.string().required(\"Confirme o nome ou altere\"),\n    price: yup.number().required(\"Confirme o valor ou altere\"),\n    category: yup.string().required(\"Confirme o nome ou altere\")\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  /*\n  onSubmitFunction - envia as informações de atualização dos produtos para o provider Products\n  */\n\n  const onSubmitFunction = data => {\n    updateProducts(data, codeProduct);\n    setOpenModal(false);\n    reset();\n  };\n  /*\n  CloseModal - fecha o modal de atualização, caso não queira fazer nenhuma atialização.\n  */\n\n\n  const CloseModal = () => {\n    setOpenModal(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ModalUp, {\n      children: [/*#__PURE__*/_jsxDEV(FiX, {\n        onClick: CloseModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmitFunction),\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Atualizar dados\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          placeholder: \"Nome\",\n          register: register,\n          name: \"name\",\n          error: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          placeholder: \"Categoria\",\n          register: register,\n          name: \"category\",\n          error: (_errors$category = errors.category) === null || _errors$category === void 0 ? void 0 : _errors$category.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          placeholder: \"Pre\\xE7o\",\n          register: register,\n          name: \"price\",\n          error: (_errors$price = errors.price) === null || _errors$price === void 0 ? void 0 : _errors$price.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          placeholder: \"Fornecedor\",\n          register: register,\n          name: \"provider\",\n          error: (_errors$provider = errors.provider) === null || _errors$provider === void 0 ? void 0 : _errors$provider.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Salvar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ModalUpdate, \"ohFuE8xcZ86zsis4CzX5C+Qy7r4=\", false, function () {\n  return [useProducts, useForm];\n});\n\n_c = ModalUpdate;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalUpdate\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/novo/desafio-frontend/src/components/ModalUpdate/index.tsx"],"names":["ModalUp","Input","yupResolver","useForm","yup","useProducts","FiX","ModalUpdate","updateProducts","setOpenModal","codeProduct","schema","object","shape","name","string","required","provider","price","number","category","register","handleSubmit","reset","formState","errors","resolver","onSubmitFunction","data","CloseModal","message"],"mappings":"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","sourcesContent":["import { ModalUp } from \"./styles\";\nimport { Input } from \"../Input\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport * as yup from \"yup\";\nimport { useProducts } from \"../../providers/Products\";\nimport { UpdateProductsData } from \"../../types/UpdateProductsData\";\nimport { FiX } from \"react-icons/fi\";\n\n/*\nFunção que retorna um modal com formulário que aparece na page StoreBD para atualizar os dados dos produtos.\n\nOBS: mesmo utilizando o método PACTH na requisição de Update, infelizmente não consegui retornar os dados\natualizados de forma satifatória. Precisei deixar todos os campos como preenchimento obriatório (mesmo sendo \n  PATCH), pois os dados não preenchidos estavam voltando em branco. \nTentei resolver isso com useEffect, mas sem sucesso... \n*/\n\nexport const ModalUpdate = () => {\n  const { updateProducts, setOpenModal, codeProduct } = useProducts();\n\n  const schema = yup.object().shape({\n    name: yup.string().required(\"Confirme o nome ou altere\"),\n    provider: yup.string().required(\"Confirme o nome ou altere\"),\n    price: yup.number().required(\"Confirme o valor ou altere\"),\n    category: yup.string().required(\"Confirme o nome ou altere\"),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  /*\n  onSubmitFunction - envia as informações de atualização dos produtos para o provider Products\n  */\n  const onSubmitFunction = (data: UpdateProductsData) => {\n    updateProducts(data, codeProduct);\n    setOpenModal(false);\n    reset();\n  };\n\n  /*\n  CloseModal - fecha o modal de atualização, caso não queira fazer nenhuma atialização.\n  */\n  const CloseModal = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      <ModalUp>\n        <FiX onClick={CloseModal} />\n        <form onSubmit={handleSubmit(onSubmitFunction)}>\n          <h2>Atualizar dados</h2>\n          <Input\n            type=\"text\"\n            placeholder=\"Nome\"\n            register={register}\n            name=\"name\"\n            error={errors.name?.message}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"Categoria\"\n            register={register}\n            name=\"category\"\n            error={errors.category?.message}\n          />\n          <Input\n            type=\"number\"\n            placeholder=\"Preço\"\n            register={register}\n            name=\"price\"\n            error={errors.price?.message}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"Fornecedor\"\n            register={register}\n            name=\"provider\"\n            error={errors.provider?.message}\n          />\n          <button type=\"submit\">Salvar</button>\n        </form>\n      </ModalUp>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}