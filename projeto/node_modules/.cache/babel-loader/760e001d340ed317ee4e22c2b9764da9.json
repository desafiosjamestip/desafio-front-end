{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/UserProvider/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport api from \"../../services/api\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserContext = /*#__PURE__*/createContext({});\nexport const UserDataProvider = ({\n  children\n}) => {\n  _s();\n\n  const token = localStorage.getItem(\"@iCash:token\") || \"\";\n  const [userData, setUserData] = useState([]);\n  const [currentBalance, setCurrentBalance] = useState(0);\n  console.log(userData);\n  useEffect(() => {\n    if (token) {\n      const userId = JSON.parse(localStorage.getItem(\"@iCash: userId\") || \"\");\n      api.get(`/users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => setUserData(res.data)).catch(res => console.log(res));\n    }\n  }, []);\n\n  const UpdateUser = (data, userId) => {\n    axios.patch(`https://api-icash.herokuapp.com/users/${userId}`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(_ => {\n      toast.success(\"Dados atualizados com sucesso!\");\n    }).catch(err => {\n      toast.error(\"Oops, algo saiu mal. Tente novamente.\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      UpdateUser,\n      currentBalance,\n      userData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserDataProvider, \"0jVVtWj0jWP4XpJUagWBXhOxLxg=\");\n\n_c = UserDataProvider;\nexport const useUpdate = () => {\n  _s2();\n\n  return useContext(UserContext);\n};\n\n_s2(useUpdate, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserDataProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/UserProvider/index.tsx"],"names":["createContext","useContext","useEffect","useState","api","toast","axios","UserContext","UserDataProvider","children","token","localStorage","getItem","userData","setUserData","currentBalance","setCurrentBalance","console","log","userId","JSON","parse","get","headers","Authorization","then","res","data","catch","UpdateUser","patch","_","success","err","error","useUpdate"],"mappings":";;;;AAAA,SACEA,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAqBA,MAAMC,WAAW,gBAAGP,aAAa,CAAmB,EAAnB,CAAjC;AAEA,OAAO,MAAMQ,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AACnE,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,EAAtD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAS,CAAT,CAApD;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAJ,EAAW;AACT,YAAMS,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACC,OAAb,CAAqB,gBAArB,KAA0C,EAArD,CAAf;AACAR,MAAAA,GAAG,CACAkB,GADH,CACQ,UAASH,MAAO,EADxB,EAC2B;AACvBI,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASd,KAAM;AAAjC;AADc,OAD3B,EAIGe,IAJH,CAISC,GAAD,IAASZ,WAAW,CAACY,GAAG,CAACC,IAAL,CAJ5B,EAKGC,KALH,CAKUF,GAAD,IAAST,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CALlB;AAMD;AACF,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMG,UAAU,GAAG,CAACF,IAAD,EAAuBR,MAAvB,KAA0C;AAC3Db,IAAAA,KAAK,CACFwB,KADH,CACU,yCAAwCX,MAAO,EADzD,EAC4DQ,IAD5D,EACkE;AAC9DJ,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASd,KAAM;AADxB;AADqD,KADlE,EAMGe,IANH,CAMSM,CAAD,IAAO;AACX1B,MAAAA,KAAK,CAAC2B,OAAN,CAAc,gCAAd;AACD,KARH,EASGJ,KATH,CASUK,GAAD,IAAS;AACd5B,MAAAA,KAAK,CAAC6B,KAAN,CAAY,uCAAZ;AACD,KAXH;AAYD,GAbD;;AAeA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,UAAF;AAAcd,MAAAA,cAAd;AAA8BF,MAAAA;AAA9B,KAA7B;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCM;;GAAMD,gB;;KAAAA,gB;AAwCb,OAAO,MAAM2B,SAAS,GAAG;AAAA;;AAAA,SAAMlC,UAAU,CAACM,WAAD,CAAhB;AAAA,CAAlB;;IAAM4B,S","sourcesContent":["import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport api from \"../../services/api\";\nimport { userUpdateData } from \"../../types/userUpdateData\";\nimport toast from \"react-hot-toast\";\nimport { useAuth } from \"../Auth\";\nimport axios from \"axios\";\n\ninterface UserDataProps {\n  name: string;\n  email: string;\n  cashback?: number | string | undefined;\n  city?: string;\n  cellphone?: number;\n  age?: number;\n}\n\ninterface UserProviderProps {\n  children: ReactNode;\n}\n\ninterface UserProviderData {\n  UpdateUser: (data: userUpdateData, userId: string) => void;\n  currentBalance: number;\n  userData: UserDataProps[];\n}\n\nconst UserContext = createContext<UserProviderData>({} as UserProviderData);\n\nexport const UserDataProvider = ({ children }: UserProviderProps) => {\n  const token = localStorage.getItem(\"@iCash:token\") || \"\";\n  const [userData, setUserData] = useState([]);\n  const [currentBalance, setCurrentBalance] = useState<number>(0);\n\n  console.log(userData);\n  useEffect(() => {\n    if (token) {\n      const userId = JSON.parse(localStorage.getItem(\"@iCash: userId\") || \"\");\n      api\n        .get(`/users/${userId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((res) => setUserData(res.data))\n        .catch((res) => console.log(res));\n    }\n  }, []);\n\n  const UpdateUser = (data: userUpdateData, userId: string) => {\n    axios\n      .patch(`https://api-icash.herokuapp.com/users/${userId}`, data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((_) => {\n        toast.success(\"Dados atualizados com sucesso!\");\n      })\n      .catch((err) => {\n        toast.error(\"Oops, algo saiu mal. Tente novamente.\");\n      });\n  };\n\n  return (\n    <UserContext.Provider value={{ UpdateUser, currentBalance, userData }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUpdate = () => useContext(UserContext);\n"]},"metadata":{},"sourceType":"module"}