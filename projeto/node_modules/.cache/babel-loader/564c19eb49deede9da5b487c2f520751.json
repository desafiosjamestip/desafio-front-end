{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/Auth/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport api from \"../../services/api\";\nimport { userData } from \"../../types/userLoginData\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const getToken = localStorage.getItem(\"@iCash:token\") || \"\";\n  const [token, setToken] = useState(getToken);\n\n  const login = (userData, history) => {\n    api.post(\"/login\", userData).then(res => {\n      localStorage.clear();\n      localStorage.setItem(\"@iCash:token\", res.data.accessToken);\n      setToken(res.data.accessToken);\n      history.push(\"/dashboard\");\n      toast.success(\"Usuário logado com sucesso!\");\n    }).catch(err => {\n      console.log(\"ERRO\", err);\n      toast.error(\"Verifique seus dados. Caso seja um novo usuário, crie sua conta.\");\n    });\n  };\n\n  const loginAdmin = (userData, history) => {\n    api.post(\"/login\", userData).then(res => {\n      console.log(res);\n      localStorage.clear();\n      localStorage.setItem(\"@iCash:token\", res.data.accessToken);\n      setToken(res.data.accessToken);\n      history.push(\"/admin-profile\");\n      toast.success(\"Usuário logado com sucesso!\");\n    }).catch(err => {\n      console.log(\"ERRO\", err);\n      toast.error(\"Verifique seus dados. Caso seja um novo usuário, crie sua conta.\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      login,\n      token,\n      setToken,\n      loginAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"veextRurH5xSny9eKtwZLzZfq3s=\");\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/Q2/sprint6/icash/src/providers/Auth/index.tsx"],"names":["createContext","useContext","useState","api","userData","toast","AuthContext","AuthProvider","children","getToken","localStorage","getItem","token","setToken","login","history","post","then","res","clear","setItem","data","accessToken","push","success","catch","err","console","log","error","loginAdmin","useAuth"],"mappings":";;;;AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,QAHF,QAQO,OARP;AASA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;;AAaA,MAAMC,WAAW,gBAAGN,aAAa,CAAmB,EAAnB,CAAjC;AAEA,OAAO,MAAMO,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AAC/D,QAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,KAAwC,EAAzD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACO,QAAD,CAAlC;;AAEA,QAAMK,KAAK,GAAG,CAACV,QAAD,EAAqBW,OAArB,KAA0C;AACtDZ,IAAAA,GAAG,CACAa,IADH,CACQ,QADR,EACkBZ,QADlB,EAEGa,IAFH,CAESC,GAAD,IAAS;AACbR,MAAAA,YAAY,CAACS,KAAb;AACAT,MAAAA,YAAY,CAACU,OAAb,CAAqB,cAArB,EAAqCF,GAAG,CAACG,IAAJ,CAASC,WAA9C;AACAT,MAAAA,QAAQ,CAACK,GAAG,CAACG,IAAJ,CAASC,WAAV,CAAR;AACAP,MAAAA,OAAO,CAACQ,IAAR,CAAa,YAAb;AACAlB,MAAAA,KAAK,CAACmB,OAAN,CAAc,6BAAd;AACD,KARH,EASGC,KATH,CASUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACArB,MAAAA,KAAK,CAACwB,KAAN,CACE,kEADF;AAGD,KAdH;AAeD,GAhBD;;AAkBA,QAAMC,UAAU,GAAG,CAAC1B,QAAD,EAAqBW,OAArB,KAA0C;AAC3DZ,IAAAA,GAAG,CACAa,IADH,CACQ,QADR,EACkBZ,QADlB,EAEGa,IAFH,CAESC,GAAD,IAAS;AACbS,MAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACAR,MAAAA,YAAY,CAACS,KAAb;AACAT,MAAAA,YAAY,CAACU,OAAb,CAAqB,cAArB,EAAqCF,GAAG,CAACG,IAAJ,CAASC,WAA9C;AACAT,MAAAA,QAAQ,CAACK,GAAG,CAACG,IAAJ,CAASC,WAAV,CAAR;AACAP,MAAAA,OAAO,CAACQ,IAAR,CAAa,gBAAb;AACAlB,MAAAA,KAAK,CAACmB,OAAN,CAAc,6BAAd;AACD,KATH,EAUGC,KAVH,CAUUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACArB,MAAAA,KAAK,CAACwB,KAAN,CACE,kEADF;AAGD,KAfH;AAgBD,GAjBD;;AAmBA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEf,MAAAA,KAAF;AAASF,MAAAA,KAAT;AAAgBC,MAAAA,QAAhB;AAA0BiB,MAAAA;AAA1B,KAA7B;AAAA,cACGtB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9CM;;GAAMD,Y;;KAAAA,Y;AAgDb,OAAO,MAAMwB,OAAO,GAAG;AAAA;;AAAA,SAAM9B,UAAU,CAACK,WAAD,CAAhB;AAAA,CAAhB;;IAAMyB,O","sourcesContent":["import {\n  createContext,\n  useContext,\n  useState,\n  ReactNode,\n  Dispatch,\n  SetStateAction,\n  useEffect,\n} from \"react\";\nimport api from \"../../services/api\";\nimport { userData } from \"../../types/userLoginData\";\nimport { History } from \"history\";\nimport toast from \"react-hot-toast\";\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\ninterface AuthProviderData {\n  login: (userData: userData, history: History) => void;\n  loginAdmin: (userData: userData, history: History) => void;\n  token: string;\n  setToken: Dispatch<SetStateAction<string>>;\n}\n\nconst AuthContext = createContext<AuthProviderData>({} as AuthProviderData);\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const getToken = localStorage.getItem(\"@iCash:token\") || \"\";\n  const [token, setToken] = useState(getToken);\n\n  const login = (userData: userData, history: History) => {\n    api\n      .post(\"/login\", userData)\n      .then((res) => {\n        localStorage.clear();\n        localStorage.setItem(\"@iCash:token\", res.data.accessToken);\n        setToken(res.data.accessToken);\n        history.push(\"/dashboard\");\n        toast.success(\"Usuário logado com sucesso!\");\n      })\n      .catch((err) => {\n        console.log(\"ERRO\", err);\n        toast.error(\n          \"Verifique seus dados. Caso seja um novo usuário, crie sua conta.\"\n        );\n      });\n  };\n\n  const loginAdmin = (userData: userData, history: History) => {\n    api\n      .post(\"/login\", userData)\n      .then((res) => {\n        console.log(res);\n        localStorage.clear();\n        localStorage.setItem(\"@iCash:token\", res.data.accessToken);\n        setToken(res.data.accessToken);\n        history.push(\"/admin-profile\");\n        toast.success(\"Usuário logado com sucesso!\");\n      })\n      .catch((err) => {\n        console.log(\"ERRO\", err);\n        toast.error(\n          \"Verifique seus dados. Caso seja um novo usuário, crie sua conta.\"\n        );\n      });\n  };\n\n  return (\n    <AuthContext.Provider value={{ login, token, setToken, loginAdmin }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"]},"metadata":{},"sourceType":"module"}