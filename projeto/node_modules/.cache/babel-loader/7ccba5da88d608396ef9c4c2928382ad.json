{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport api from \"../../Services\";\n/*\nFunção que faz o registro de usuários na api e contém as interfaces necessárias para as validações do\ntypescript\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserRegisterContext = /*#__PURE__*/createContext({});\nexport const UserProvider = ({\n  children\n}) => {\n  /*\n  userRegister - faz a requicição de registro do usuário na api\n   */\n  const userRegister = (data, history) => {\n    api.post(\"/register\", data).then(_ => {\n      toast.success(\"Cadastro realizado com sucesso\");\n      return history.push(\"/login\");\n    }).catch(_ => {\n      toast.error(\"Tente novamente\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserRegisterContext.Provider, {\n    value: {\n      userRegister\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_c = UserProvider;\nexport const useRegisterUser = () => {\n  _s();\n\n  return useContext(UserRegisterContext);\n};\n\n_s(useRegisterUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx"],"names":["createContext","useContext","toast","api","UserRegisterContext","UserProvider","children","userRegister","data","history","post","then","_","success","push","catch","error","useRegisterUser"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,QAAqD,OAArD;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA;AACA;AACA;AACA;;;AAUA,MAAMC,mBAAmB,gBAAGJ,aAAa,CAAW,EAAX,CAAzC;AAEA,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AACvD;AACF;AACA;AACE,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAyBC,OAAzB,KAA8C;AACjEN,IAAAA,GAAG,CACAO,IADH,CACQ,WADR,EACqBF,IADrB,EAEGG,IAFH,CAESC,CAAD,IAAO;AACXV,MAAAA,KAAK,CAACW,OAAN,CAAc,gCAAd;AACA,aAAOJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAP;AACD,KALH,EAMGC,KANH,CAMUH,CAAD,IAAO;AACZV,MAAAA,KAAK,CAACc,KAAN,CAAY,iBAAZ;AACD,KARH;AASD,GAVD;;AAYA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAET,MAAAA;AAAF,KAArC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArBM;KAAMD,Y;AAuBb,OAAO,MAAMY,eAAe,GAAG;AAAA;;AAAA,SAAMhB,UAAU,CAACG,mBAAD,CAAhB;AAAA,CAAxB;;GAAMa,e","sourcesContent":["import { createContext, ReactNode, useContext } from \"react\";\nimport { History } from \"history\";\nimport toast from \"react-hot-toast\";\nimport { UserRegisterData } from \"../../types/RegisterUser\";\nimport api from \"../../Services\";\n\n/*\nFunção que faz o registro de usuários na api e contém as interfaces necessárias para as validações do\ntypescript\n*/\n\ninterface UserProps {\n  children: ReactNode;\n}\n\ninterface UserData {\n  userRegister: (data: UserRegisterData, history: History) => void;\n}\n\nconst UserRegisterContext = createContext<UserData>({} as UserData);\n\nexport const UserProvider = ({ children }: UserProps) => {\n  /*\n  userRegister - faz a requicição de registro do usuário na api\n   */\n  const userRegister = (data: UserRegisterData, history: History) => {\n    api\n      .post(\"/register\", data)\n      .then((_) => {\n        toast.success(\"Cadastro realizado com sucesso\");\n        return history.push(\"/login\");\n      })\n      .catch((_) => {\n        toast.error(\"Tente novamente\");\n      });\n  };\n\n  return (\n    <UserRegisterContext.Provider value={{ userRegister }}>\n      {children}\n    </UserRegisterContext.Provider>\n  );\n};\n\nexport const useRegisterUser = () => useContext(UserRegisterContext);\n"]},"metadata":{},"sourceType":"module"}