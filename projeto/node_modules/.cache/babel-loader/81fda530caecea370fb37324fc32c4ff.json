{"ast":null,"code":"var _jsxFileName = \"/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport api from \"../../Services\";\nimport { useProducts } from \"../Products\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserRegisterContext = /*#__PURE__*/createContext({});\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    store\n  } = useProducts();\n\n  const userRegister = (data, history) => {\n    const {\n      email,\n      name,\n      password\n    } = data;\n    const id = store.length + 1;\n    api.post(\"/register\", {\n      email: email,\n      password: password,\n      name: name,\n      id: id\n    }).then(_ => {\n      toast.success(\"Cadastro realizado com sucesso\");\n      return history.push(\"/login\");\n    }).catch(_ => {\n      toast.error(\"Tente novamente\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserRegisterContext.Provider, {\n    value: {\n      userRegister\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserProvider, \"nYlaP8vbd+6O2B/arhjf2pVVnqU=\", false, function () {\n  return [useProducts];\n});\n\n_c = UserProvider;\nexport const useRegisterUser = () => {\n  _s2();\n\n  return useContext(UserRegisterContext);\n};\n\n_s2(useRegisterUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"sources":["/home/pierre/Documentos/projects/novo/desafio-frontend/src/providers/UserRegisterProvider/index.tsx"],"names":["createContext","useContext","toast","api","useProducts","UserRegisterContext","UserProvider","children","store","userRegister","data","history","email","name","password","id","length","post","then","_","success","push","catch","error","useRegisterUser"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,QAAqD,OAArD;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAUA,MAAMC,mBAAmB,gBAAGL,aAAa,CAAW,EAAX,CAAzC;AAEA,OAAO,MAAMM,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAAA;;AACvD,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,WAAW,EAA7B;;AACA,QAAMK,YAAY,GAAG,CAACC,IAAD,EAAyBC,OAAzB,KAA8C;AACjE,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA4BJ,IAAlC;AACA,UAAMK,EAAE,GAAGP,KAAK,CAACQ,MAAN,GAAe,CAA1B;AACAb,IAAAA,GAAG,CACAc,IADH,CACQ,WADR,EACqB;AACjBL,MAAAA,KAAK,EAAEA,KADU;AAEjBE,MAAAA,QAAQ,EAAEA,QAFO;AAGjBD,MAAAA,IAAI,EAAEA,IAHW;AAIjBE,MAAAA,EAAE,EAAEA;AAJa,KADrB,EAOGG,IAPH,CAOSC,CAAD,IAAO;AACXjB,MAAAA,KAAK,CAACkB,OAAN,CAAc,gCAAd;AACA,aAAOT,OAAO,CAACU,IAAR,CAAa,QAAb,CAAP;AACD,KAVH,EAWGC,KAXH,CAWUH,CAAD,IAAO;AACZjB,MAAAA,KAAK,CAACqB,KAAN,CAAY,iBAAZ;AACD,KAbH;AAcD,GAjBD;;AAmBA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAAEd,MAAAA;AAAF,KAArC;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA1BM;;GAAMD,Y;UACOF,W;;;KADPE,Y;AA4Bb,OAAO,MAAMkB,eAAe,GAAG;AAAA;;AAAA,SAAMvB,UAAU,CAACI,mBAAD,CAAhB;AAAA,CAAxB;;IAAMmB,e","sourcesContent":["import { createContext, ReactNode, useContext } from \"react\";\nimport { History } from \"history\";\nimport toast from \"react-hot-toast\";\nimport { UserRegisterData } from \"../../types/RegisterUser\";\nimport api from \"../../Services\";\nimport { useProducts } from \"../Products\";\n\ninterface UserProps {\n  children: ReactNode;\n}\n\ninterface UserData {\n  userRegister: (data: UserRegisterData, history: History) => void;\n}\n\nconst UserRegisterContext = createContext<UserData>({} as UserData);\n\nexport const UserProvider = ({ children }: UserProps) => {\n  const { store } = useProducts();\n  const userRegister = (data: UserRegisterData, history: History) => {\n    const { email, name, password } = data;\n    const id = store.length + 1;\n    api\n      .post(\"/register\", {\n        email: email,\n        password: password,\n        name: name,\n        id: id,\n      })\n      .then((_) => {\n        toast.success(\"Cadastro realizado com sucesso\");\n        return history.push(\"/login\");\n      })\n      .catch((_) => {\n        toast.error(\"Tente novamente\");\n      });\n  };\n\n  return (\n    <UserRegisterContext.Provider value={{ userRegister }}>\n      {children}\n    </UserRegisterContext.Provider>\n  );\n};\n\nexport const useRegisterUser = () => useContext(UserRegisterContext);\n"]},"metadata":{},"sourceType":"module"}